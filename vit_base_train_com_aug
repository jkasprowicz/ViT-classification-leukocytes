from transformers import ViTForImageClassification, ViTImageProcessor, TrainingArguments, Trainer
from datasets import load_dataset
import torch
from transformers import EarlyStoppingCallback

# Load dataset from image folder
dataset = load_dataset("imagefolder", data_dir="dataset", split="train")

# Split if you don't have a separate test set
split_dataset = dataset.train_test_split(test_size=0.1)  # 10% for test
train_ds = split_dataset["train"]
test_ds = split_dataset["test"]

# Load processor (feature extractor) and model
processor = ViTImageProcessor.from_pretrained("google/vit-base-patch16-224-in21k")

label_names = ['Artefato', 'Basofilo', 'Bastonete', 'Blasto', 'Eosinofilo', 'Eritroblasto',
               'Linfocito', 'Linfocito atipico', 'Metamielocito', 'Mielocito', 'Monocito',
               'Neutrofilo segmentado', 'Promielocito', 'Restos celulares']

label2id = {name: i for i, name in enumerate(label_names)}
id2label = {i: name for i, name in enumerate(label_names)}

model = ViTForImageClassification.from_pretrained(
    "google/vit-base-patch16-224-in21k",
    num_labels=len(label_names),
    id2label=id2label,
    label2id=label2id,
)

def transform(example):
    inputs = processor(images=example["image"], return_tensors="pt")
    # inputs["pixel_values"] shape is (1, C, H, W)
    pixel_values = inputs["pixel_values"].squeeze(0)  # remove batch dim -> (C, H, W)
    return {
        "pixel_values": pixel_values,
        "labels": example["label"]
    }


train_ds = train_ds.with_transform(transform)
test_ds = test_ds.with_transform(transform)

# Define training arguments
training_args = TrainingArguments(
    output_dir="./vit-checkpoints",
    per_device_train_batch_size=2,
    per_device_eval_batch_size=2,
    num_train_epochs=50,
    eval_strategy="epoch",
    save_strategy="epoch",
    logging_dir="./logs",
    remove_unused_columns=False,
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model="loss",  # or "accuracy"
    greater_is_better=False,       # because we want to minimize the loss
    report_to=[]
)

# Define metrics
import evaluate
accuracy = evaluate.load("accuracy")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = logits.argmax(-1)
    return accuracy.compute(predictions=preds, references=labels)

# Create Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    tokenizer=processor,
    compute_metrics=compute_metrics,
)

# Train!
trainer.train()
